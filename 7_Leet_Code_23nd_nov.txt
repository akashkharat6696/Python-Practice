# Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

# Example
# 1:
# 
# Input: s = "abab"
# Output: true
# Explanation: It is the
# substring
# "ab"
# twice.
# Example
# 2:
# 
# Input: s = "aba"
# Output: false
# Example
# 3:
# 
# Input: s = "abcabcabcabc"
# Output: true
# Explanation: It is the
# substring
# "abc"
# four
# times or the
# substring
# "abcabc"
# twice.


class Solution:
    def repeatedSubstringPattern(self, s: str):

        ans = ""
        temp = ""

        for i in range(0, len(s) - 1):
            temp += s[i]
            if len(s) % len(temp) == 0 and temp * int((len(s) / len(temp))) == s:
                print(temp)
                return 1

        return 0


# not getting what the error is
class Solution:
    def checkdouble(self, s: str):
        ans = ""
        temp = ""
        for i in range(0, len(s) - 1):
            temp += s[i]
            if len(s) % len(temp) == 0 and temp * int((len(s) / len(temp))) == s:
                # print(temp)
                return True
        return False


s = "AkashAkash"
classs = Solution()
result = classs.checkdouble(s)
print(result)	